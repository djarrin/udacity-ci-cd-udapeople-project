version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if ! command -v aws &> /dev/null
            then
              if ! command -v curl &> /dev/null
              then
                apk --no-cache add curl
              fi
              alias python="python3"
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            fi
            aws cloudformation delete-stack --stack-name udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}

  install-aws-cli:
    description: Installs AWS CLI onto images that dont already have it installed
    steps:
      - run:
          name: Install AWS CLI
          command: |
            if ! command -v curl &> /dev/null
            then
              apk --no-cache add curl
            fi

            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            cd ~/project/frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd ~/project/backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Audit FrontEnd
          command: |
            cd ~/project/frontend
            npm audit fix --audit-level=critical --force
#
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Audit BackEnd
          command: |
            cd ~/project/backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar
      - run:
          name: Install gzip
          command: |
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Contents of inventory.txt
          command: |
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
        environment:
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [ "2f:bc:c6:c4:f3:ae:94:b9:b6:78:ac:2a:f8:1f:91:41" ]
      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
        environment:
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Run migrations
          command: |
            cd backend
            touch migration.log
            npm install
            npm run build
            echo "starting migration"
            npm run migrations > migration.log
            cat migration.log
            echo "migration done"
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep "has been executed successfully\|No migrations are pending" migration.log
             then
               echo "migration_${CIRCLE_WORKFLOW_ID} completed"
               curl -H "Content-Type: text/plain" -H "token: c402f2ac-dcbe-431f-8b8c-19fc2ba90478" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
             else
               echo "migration_${CIRCLE_WORKFLOW_ID} failed"
               curl -H "Content-Type: text/plain" -H "token: c402f2ac-dcbe-431f-8b8c-19fc2ba90478" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
             fi
      - destroy-environment


  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --output text)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build:prod
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi


workflows:
  default:
    jobs:
      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [deploy-infrastructure]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
      - deploy-frontend:
#          requires: [run-migrations]
          requires: [build-frontend, deploy-infrastructure]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
